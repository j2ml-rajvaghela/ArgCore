@using ArgCore.Helpers
@model ArgCore.Models.ClientManagementReports

@if (Model.OverchargeRevenueRecovered != null && Model.OverchargeRevenueRecovered.Any())
{
    var firstDateOfYear = new DateTime(DateTime.Now.Year, 1, 1);

    //DateTime lastdate = Convert.ToDateTime(Model.SearchOptions.ClientEndDate);
    //var firstDateOfYear = new DateTime(lastdate.Year, 1, 1);
    <h3> Report Summary- Overcharge Snapshot</h3>
    <table id="ClientsReportList" class="table text-center">
        <thead>

            <tr>
                <th style="width:10%">Region</th>
                <th style="width:30%;" class="fontSize">OVERCHARGES IDENTIFIED FOR PERIOD<br /> @Model.SearchOptions.ClientStartDate to @Model.SearchOptions.ClientEndDate</th>
                @*<th style="width:30%;" class="fontSize">Revenue Recovered for YTD <br />@firstDateOfYear.ToString("MM-dd-yyy") to @Model.SearchOptions.ClientEndDate</th>*@
                <th style="width:30%;" class="fontSize">OVERCHARGES IDENTIFIED FOR YTD <br />@firstDateOfYear.ToString("MM-dd-yyy") to @DateTime.Now.ToString("MM-dd-yyy")</th>

                <th style="width:30%;" class="fontSize">OVERCHARGES IDENTIFIED FOR PAST YEAR <br />@DateTime.Now.AddYears(-1).ToString("MM-dd-yyy") to @Model.SearchOptions.ClientEndDate</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.OverchargeRevenueRecovered)
            {
                <tr>
                    <td>@item.Region</td>
                    <td>@item.RevenueRecoveredForPeriodFormatted</td>
                    <td>@item.RevenueRecoveredForYTDFormatted</td>
                    <td>@item.RevenueRecoveredForPastYear</td>
                </tr>
            }
        </tbody>
    </table>
    <div class="DetailInfo">
        <span class="pageno"></span>
        @foreach (var item in Model.OverchargeRevenueRecovered)
        {
            <table class="table row revRec">
                <tr>
                    <td class="myLabel"><b>Region</b></td>
                    <td class="value"><b>@item.Region</b></td>
                </tr>
                <tr>
                    <td class="myLabel">Overcharges identified for period @Model.SearchOptions.ClientStartDate to @Model.SearchOptions.ClientEndDate</td>
                    <td class="value">@item.RevenueRecoveredForPeriodFormatted</td>
                </tr>
                <tr>
                    @*<td class="myLabel">Revenue Recovered for YTD @firstDateOfYear.ToString("MM-dd-yyy") to @Model.SearchOptions.ClientEndDate</td>*@@*DateTime.Now.ToString("MM-dd-yyy")*@
                    <td class="myLabel">Overcharges identified for YTD @firstDateOfYear.ToString("MM-dd-yyy") to @DateTime.Now.ToString("MM-dd-yyy")</td>
                    @*DateTime.Now.ToString("MM-dd-yyy")*@
                    <td class="value">@item.RevenueRecoveredForYTDFormatted</td>
                </tr>
                <tr>
                    <td class="myLabel">Overcharge rate (per shipment count) relative to scope for period</td>
                    <td class="value">@item.OverChargeRate</td>
                </tr>
                @*<tr>
        <td class="myLabel">Collection Rate (past 12 months)</td>
        <td class="value">@(Model.CollectionRate)@Html.Raw("%")</td>
        </tr>*@
                @*<tr>
        <td class="myLabel">Overcharge Trend (% of scope) over past 2 years</td>
        <td class="value">@(Model.OverchargeRevenueLossRate)@Html.Raw("%")</td>
        </tr>*@
            </table>

            var nineHundredDaysAgo = DateTime.Today.AddDays(-900);
            var ninetyDaysAgo = DateTime.Today.AddDays(-90);
            <div class="pagebreak">
                <table class="table row revLossTrend" style="margin-top:30px;">
                    <tr>
                        <td class="myLabel"><b>Overcharge Trend (% of scope) over past 2 years</b></td>
                    </tr>
                    <tr>
                        <td>
                            <canvas id="overchargerevenueLossTrend" style="margin-top: 50px;"></canvas>
                        </td>
                    </tr>
                </table>
                <span class="pageno"></span>
            </div>
            <div class="pagebreak">
                <table class="table row revLossByBDErrorCode" style="margin-top:30px;border-top: 1px solid #ccc;">
                    <tr>
                        <td class="myLabel" style="padding-top: 30px;"><b>Overcharges by Error Code for Period @Model.SearchOptions.ClientStartDate to @Model.SearchOptions.ClientEndDate</b></td>
                    </tr>
                    <tr>
                        <td>
                            <canvas id="overchargerevLossByBDErrorCode" style="margin-top: 50px;"></canvas>
                        </td>
                    </tr>
                    @if (Model.OverchargeRevLossByBDErrorCode != null && Model.OverchargeRevLossByBDErrorCode.Any())
                    {
                        <tr>
                            <td>
                                <table style="margin-top: 20px;" class="table table-bordered table-striped">
                                    <thead>
                                        <tr>
                                            <th>BD Error Code</th>
                                            <th class="text-right">OverCharge Count</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var revLoss in Model.OverchargeRevLossByBDErrorCode)
                                        {
                                            <tr>
                                                <td>@revLoss.BDErrorCode (@revLoss.ShortDescription)</td>
                                                <td class="text-right">@revLoss.OverChargeCountForPeriod</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </td>
                        </tr>
                    }
                </table>
                <span class="pageno"></span>
            </div>
            <table class="table row revByCustomer" style="margin-top:30px;border-top: 1px solid #ccc;">
                <tr>
                    <td class="myLabel" style="padding-top: 30px;"><b>Overcharges by Customer (Top 20) for Period @Model.SearchOptions.ClientStartDate to @Model.SearchOptions.ClientEndDate</b></td>
                </tr>
                <tr>
                    <td>
                        <canvas id="overchargerevenueByCustomer" style="margin-top: 50px;"></canvas>
                    </td>
                </tr>
            </table>
            if (Model.OverchargeRevByCustomer != null && Model.OverchargeRevByCustomer.Any())
            {
                <table style="margin-top: 30px;" class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>Customer</th>
                            @*<th>Customer</th>*@
                            <th class="text-right">OverCharge Count</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var revByCust in Model.OverchargeRevByCustomer)
                        {
                            <tr>
                                <td>@revByCust.CustomerID (@revByCust.CustomerName)</td>
                                @*<td>@revByCust.CustomerName</td>*@
                                <td class="text-right">@revByCust.OverChargeCountForPeriod</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            <div class="pagebreak">
                <table class="table row revRecByOrigin" style="margin-top:30px;border-top: 1px solid #ccc;">
                    <tr>
                        <td class="myLabel" style="padding-top: 30px;"><b>Overcharges by Origin for Period @Model.SearchOptions.ClientStartDate to @Model.SearchOptions.ClientEndDate</b></td>
                    </tr>
                    <tr>
                        <td>
                            <canvas id="overchargerevenueRecByOrigin" style="margin-top: 50px;"></canvas>
                        </td>
                    </tr>
                </table>
                <span class="pageno"></span>
            </div>
            if (Model.OverchargeRevRecoveredByOrigin != null && Model.OverchargeRevRecoveredByOrigin.Any())
            {
                if (Model.OverchargeRevRecoveredByOrigin.Count > 6)
                {
                    @Html.Raw("<div class='pagebreak'>")
                }

                <table style="margin-top: 30px;" class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>Origin Location Code</th>
                            <th class="text-right">OverCharge Count</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var revRec in Model.OverchargeRevRecoveredByOrigin)
                        {
                            <tr>
                                <td>@revRec.OriginLocationCode  (@revRec.CityState)</td>
                                <td class="text-right">@revRec.OverChargeCountForPeriod</td>
                            </tr>
                        }
                    </tbody>
                </table>

                if (Model.OverchargeRevRecoveredByOrigin.Count > 6)
                {
                    @Html.Raw("<span class='pageno'></span></div>")
                }
            }
        }
    </div>
}
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>

<script src="@(Common.MyRoot)res/js/Chart.bundle.min.js?c=13" type="text/javascript"></script>
@*<script src="https://atlas-st.nextpageit.com/res/js/Chart.bundle.min.js?c=13" type="text/javascript"></script>*@
<script src="@(Common.MyRoot)/Scripts/ClientMngmntReport.js?c=@Common.VersionNo"></script>
@if (Model.OverchargeRevenueLossTrend == null)
{
    return;
}

<script>
    Chart.pluginService.register({
        beforeRender: function (chart) {
            if (chart.config.options.showAllTooltips) {
                // create an array of tooltips
                // we can't use the chart tooltip because there is only one tooltip per chart
                chart.pluginTooltips = [];
                chart.config.data.datasets.forEach(function (dataset, i) {
                    chart.getDatasetMeta(i).data.forEach(function (sector, j) {
                        chart.pluginTooltips.push(new Chart.Tooltip({
                            _chart: chart.chart,
                            _chartInstance: chart,
                            _data: chart.data,
                            _options: chart.options,
                            _active: [sector]
                        }, chart));
                    });
                });

                // turn off normal tooltips
                chart.options.tooltips.enabled = false;
            }
        },
        afterDraw: function (chart, easing) {
            if (chart.config.options.showAllTooltips) {
                // we don't want the permanent tooltips to animate, so don't do anything till the animation runs atleast once
                if (!chart.allTooltipsOnce) {
                    if (easing !== 1)
                        return;
                    chart.allTooltipsOnce = true;
                }

                // turn on tooltips
                chart.options.tooltips.enabled = true;
                Chart.helpers.each(chart.pluginTooltips, function (tooltip) {
                    tooltip.initialize();
                    tooltip.update();
                    // we don't actually need this since we are not animating tooltips
                    tooltip.pivot();
                    tooltip.transition(easing).draw();
                });
                chart.options.tooltips.enabled = false;
            }
        }
    })
</script>
<script>
    //Line Chart
    var lineXAxisData;
    var lineYAxisData;
    var lineXAxisData = @Html.Raw(JavaScript.Serialize(Model.OverchargeRevenueLossTrend.Select(x => x.ScopeDate)));
    //alert(lineXAxisData);
    //var lineXAxisDataLabel = @Html.Raw(JavaScript.Serialize(Model.OverchargeRevenueLossTrend.Select(x => x.ScopeDateTooltipLabel)));
    var lineYAxisData = @Html.Raw(JavaScript.Serialize(Model.OverchargeRevenueLossTrend.Select(x => x.LossRateFormatted)));
    if (lineXAxisData.length > 0 && lineYAxisData.length > 0) {
        //function ToJavaScriptDate(value) {
        //    var pattern = /Date\(([^)]+)\)/;
        //    var results = pattern.exec(value);
        //    var dt = new Date(parseFloat(results[1]));
        //    return dt.getDate() + "/" + (dt.getMonth() + 1) + "/" + dt.getFullYear();
        //}
        //for (var i = 0; i < lineXAxisData.length; i++) {
        //    lineXAxisData[i] = ToJavaScriptDate(lineXAxisData[i]);
        //    //console.log(lineXAxisData[i]);
        //}

        var lineOptions = {
            type: 'line',
            data: {
                labels: lineXAxisData,
                datasets: [
                    {
                        label: 'Overcharge Rate',
                        data: lineYAxisData,
                        borderColor: '#4CC0C0',
                        backgroundColor: '#d0f8f8',
                        borderWidth: 1
                    }
                ]
            },
            options: {
                tooltips: {
                    callbacks: {
                        title: function (tooltipItem, data) { return 'Scope Date: ' + data.labels[tooltipItem[0].index]; }
                    }
                },
                legend: {
                    display: false
                },
                showAllTooltips: true,
                scales: {
                    yAxes: [{
                        ticks: {
                            fontSize: 14,
                            beginAtZero: true
                        },
                        scaleLabel: {
                            display: true,
                            labelString: 'Overcharge Trend (% of scope) over past 2 years',
                            fontColor: "black",
                            fontSize: 18
                        }
                    }],
                    xAxes: [{
                        ticks: {
                            fontSize: 14
                        },
                        scaleLabel: {
                            display: true,
                            labelString: 'Scope Date',
                            fontColor: "black",
                            fontSize: 18
                        }
                    }]
                }
            }
        }

        var lineCtx = document.getElementById('overchargerevenueLossTrend').getContext('2d');
        new Chart(lineCtx, lineOptions);
    }
</script>
@if (Model.OverchargeRevLossByBDErrorCode == null)
{
    return;
}
<script>
    //Pie Chart
    var pieLabels; var pieData;

    pieLabels = @Html.Raw(JavaScript.Serialize(Model.OverchargeRevLossByBDErrorCode.Select(x => x.BDErrorCode)));
    pieData = @Html.Raw(JavaScript.Serialize(Model.OverchargeRevLossByBDErrorCode.Select(x => x.OverChargeCountForPeriod)));
    var data = {
        labels: pieLabels,
        datasets: [{
            backgroundColor: [
                "#2ecc71",
                "#3498db",
                "#95a5a6",
                "#9b59b6",
                "#f1c40f",
                "#e74c3c",
                "#34495e"
            ],
            data: pieData
        }]
    };

    var pieCtx = document.getElementById("overchargerevLossByBDErrorCode").getContext('2d');
    var myPieChart = new Chart(pieCtx, {
        type: 'pie',
        data: data,
        options: {
            showAllTooltips: true
        }
    });
</script>
@if (Model.OverchargeRevByCustomer == null)
{
    return;
}
<script>
    //Pie Chart
    var pieCustLabels; var pieCustData;
    pieCustLabels = @Html.Raw(JavaScript.Serialize(Model.OverchargeRevByCustomer.Select(x => x.CustomerID)));
    pieCustData = @Html.Raw(JavaScript.Serialize(Model.OverchargeRevByCustomer.Select(x => x.PaymentTotal)));
    var data = {
        labels: pieCustLabels,
        datasets: [{
            backgroundColor: [
                //"#2ecc71","c00000","#E9EAEC","#212D39",
                //"#3498db",
                //"#95a5a6",
                //"#9b59b6",
                //"#f1c40f","#5A738E","#23527c","#A3A2A3","#5FCE9B",
                //"#e74c3c",
                //"#34495e"
                "#337ab7", "#5cb85c", "#878787", "#5bc0de", "#ec693b", "#f1c40f", "#95a5a6", "#937070", "#339967", "#937039",
                "#9c3b3b", "#626262", "#d34d1e", "#c00000", "#5A738E", "#d9534f", "#34495e", "#517c95", "#b65b5b", "#1ca2b6"
            ],
            data: pieCustData
        }]
    };

    var pieCtx = document.getElementById("overchargerevenueByCustomer").getContext('2d');
    var myPieChart = new Chart(pieCtx, {
        type: 'pie',
        data: data
        , options: {
            showAllTooltips: true
        }
    });
</script>
@if (Model.OverchargeRevRecoveredByOrigin == null)
{
    return;
}
<script>
    //function numberWithCommas(x) {
    //    var parts = x.toString().split(".");
    //    parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    //    return parts.join(".");
    //}
    //Bar Chart
    var barXAxisData;
    var barYAxisData;

    barXAxisData = @Html.Raw(JavaScript.Serialize(Model.OverchargeRevRecoveredByOrigin.Select(x => x.OriginLocationCode)));
    barYAxisData = @Html.Raw(JavaScript.Serialize(Model.OverchargeRevRecoveredByOrigin.Select(x => x.OverChargeCountForPeriod)));
    //for (var i = 0; i < barYAxisData.length; i++) {
    //    barYAxisData[i] = numberWithCommas(barYAxisData[i]);
    //    //console.log(barYAxisData[i]);
    //}
    if (barXAxisData.length > 0 && barYAxisData.length > 0) {
        var barData = {
            labels: barXAxisData,
            datasets: [
                {
                    label: 'Revenue Recovered',
                    backgroundColor: "#8edfdf",
                    borderColor: "#4CC0C0",
                    borderWidth: 2,
                    hoverBackgroundColor: "#8edfdf",
                    hoverBorderColor: "#4CC0C0",
                    data: barYAxisData,
                }
            ]
        };
        var barOption = {
            legend: {
                display: false
            },
            scaleLabel:
                function (label) { return label.value.toString().replace(/\B(?=(\d{2})+(?!\d))/g, ","); },
            //tooltips:{
            //    callbacks: {
            //        label: function(tooltipItem, barYAxisData) {
            //            var value = barYAxisData.datasets[0].data[tooltipItem.index];
            //            var label = barYAxisData.labels[tooltipItem.index];
            //            return label + ' ' + percentage + '%';
            //        }
            //    }
            //},
            scales: {
                yAxes: [{
                    //valueFormatString:  "#,##0.##",
                    stacked: true,
                    gridLines: {
                        display: false
                    }, ticks: {
                        fontSize: 14, beginAtZero: true
                    },
                    //scaleLabel: function (valuePayload) {
                    //    return Number(valuePayload.value).toFixed(2).replace('.',',');
                    //},
                    //         scaleLabel:
                    //function(label){return  label.value.toString().replace(/\B(?=(\d{2})+(?!\d))/g, ",");}
                    //scaleLabel: {
                    //    display: true,
                    //    labelString: 'Recovered',
                    //    fontColor: "black",
                    //    fontSize: 18
                    //}
                }],
                xAxes: [{
                    gridLines: {
                        display: false
                    },
                    ticks: {
                        fontSize: 14
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'Origin',
                        fontColor: "black",
                        fontSize: 18
                    }
                }]
            }
        };

        var barCanvas = document.getElementById('overchargerevenueRecByOrigin');
        var myBarChart = Chart.Bar(barCanvas, {
            data: barData,
            options: barOption
        });
    }
</script>